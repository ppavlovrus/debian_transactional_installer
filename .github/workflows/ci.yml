name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlite3 ansible sqlite3-dev

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Install package
      run: |
        pip install -e .

    - name: Run linting
      run: |
        flake8 core/ backends/ storage/ metadata/ cli/ tests/
        mypy core/ backends/ storage/ metadata/ cli/

    - name: Run tests
      run: |
        pytest -v --cov=core --cov=backends --cov=storage --cov=metadata --cov=cli --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/
        retention-days: 30

  docker:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      run: |
        docker build -t transactional-installer .

    - name: Test Docker image
      run: |
        docker run --rm transactional-installer --help

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v3

    - name: Run security checks
      run: |
        pip install bandit safety
        bandit -r core/ backends/ storage/ metadata/ cli/
        safety check

  test-all:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlite3 ansible sqlite3-dev

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .

    - name: Run all tests with coverage
      run: |
        pytest tests/ -v --cov=core --cov=backends --cov=storage --cov=metadata --cov=cli --cov-report=html --cov-report=xml --cov-report=term-missing

    - name: Upload full test coverage
      uses: actions/upload-artifact@v3
      with:
        name: full-test-coverage
        path: htmlcov/
        retention-days: 30

  integration:
    runs-on: ubuntu-latest
    needs: [test, docker, test-all]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlite3 ansible sqlite3-dev

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .

    - name: Run demo stack integration tests
      run: |
        pytest tests/test_integration_demo_stack.py -v --cov=core --cov=backends --cov=storage --cov-report=html
        pytest tests/test_integration_demo_stack_fixtures.py -v

    - name: Upload demo stack test coverage
      uses: actions/upload-artifact@v3
      with:
        name: demo-stack-coverage
        path: htmlcov/
        retention-days: 30

    - name: Run CLI integration tests
      run: |
        # Create test package
        transactional-installer create-template test-integration 1.0.0 -o test-package.yml
        
        # Validate package
        transactional-installer validate test-package.yml
        
        # Test dry run
        sudo transactional-installer install test-package.yml --dry-run 